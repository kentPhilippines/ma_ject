<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
		"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<context id="testTables" targetRuntime="MyBatis3" defaultModelType="flat">
	   <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
         一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，
        比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!--自定义的toString方法-->
        <plugin type="com.payProject.system.util.MyToStringPlugin"/>

		<commentGenerator>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>
		<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
						connectionURL="jdbc:mysql://127.0.0.1:3306/payproject?serverTimezone=UTC"
						userId="root"
						password="123456">
		</jdbcConnection>
		<!-- <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
			connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:orcl"
			userId="scott"
			password="wcy675600920">
		</jdbcConnection> -->

		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
			NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- targetProject:生成PO类的位置 -->
		<javaModelGenerator targetPackage="com.payProject.system.entity"
							targetProject="src/main/java">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!-- 从数据库返回的值被清理前后的空格 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>
		<!-- targetProject:mapper映射文件生成的位置 -->
		<sqlMapGenerator targetPackage="com/payProject/system/mapper"
						 targetProject="src/main/resources">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<!-- targetPackage：mapper接口生成的位置 -->
		<javaClientGenerator type="XMLMAPPER"
							 targetPackage="com.payProject.system.mapper" 
							 targetProject="src/main/java">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

<!--指定数据库要逆向工程生成的表-->
        <!--可以生成很多表，生成在本工程结构里面-->
        <!--设置Example为true的话，就会生成Example文件，比较杂乱，不想生成这些内容的话，直接选择false即可
        tableName:指定了表名
        domainObjectName:指定了实体类的名称,可以去掉domainObjectName="False_comment"
        -->
            <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，
            比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate
            再比如：数据库里的原本列名是：`is_show_name`（都是小写），
            如果true就会生成：is_show_name（还是数据库实际的字段名字,原始名字）；生成的setter/getter为：getIs_show_name()和setIs_show_name()(只是第一个字母大写)
            如果false就会生成：isShowName（去掉了下划线，变成了驼峰命名方法）；生成的setter/getter为：getIsShowName() 和setIsShowName() (只是第一个字母大写)
            注意：如果明确的使用columnOverride元素指定了字段对应的实体的属性名,那么useActualColumnNames会被忽略。
            -->
           <!-- <property name="useActualColumnNames" value="false"/>-->
  <table schema="" tableName="system_user"
                domainObjectName="User"
               >
               </table>
                 <table schema="" tableName="system_resources"
                domainObjectName="Resources"
               >
               </table>
                 <table schema="" tableName="system_user_role"
                domainObjectName="UserRole"
                >
               </table>
                 <table schema="" tableName="system_role_resources"
                domainObjectName="RoleResources"
                >
               </table>
                 <table schema="" tableName="system_role"
                domainObjectName="Role"
                >
		</table>
		<!-- 有些表的字段需要指定java类型
		 <table schema="" tableName="">
			<columnOverride column="" javaType="" />
		</table> -->
	</context>
</generatorConfiguration>